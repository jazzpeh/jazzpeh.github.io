{"componentChunkName":"component---src-templates-tags-tsx","path":"/tags/big-o/","result":{"data":{"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"This guide is curated to help prepare for technical interviews. I’ve complied all the useful information including how to calculate the…","fields":{"slug":"/run-time-complexity/"},"frontmatter":{"date":"April 28, 2020","title":"A cheat guide to run time complexity","description":"This guide is curated to help prepare for technical interviews. I've complied all the useful information including how to calculate the complexity in this guide.","tags":["Big-O","Data Structures and Algorithm"]},"html":"<p>This guide is curated to help prepare for technical interviews. I’ve complied all the useful information including how to calculate the complexity in this guide.</p>\n<!-- ## Table of contents\n\n- [Big-O Complexity Chart](#big-o-complexity-chart)\n- [Common Data Structure Operations](#common-data-structure-operations)\n  - [Physical Data Structures](#physical-data-structures)\n    - [Array](#array)\n    - [Linked List](#linked-list)\n  - [Logical Data Structures](#logical-data-structures)\n    - [Stack](#stack)\n    - [Queue](#queue)\n    - [Tree](#tree)\n      - [Binary Tree](#binary-tree)\n      - [Binary Search Tree & AVL Tree](#binary-search-tree--avl-tree)\n    - [Heap (Using Array)](#heap-using-array)\n    - [Hash Table](#hash-table)\n    - [Graphs](#graphs)\n      - [Common Operations](#common-operations)\n      - [Common Algorithms for Graph problems](#common-algorithms-for-graph-problems)\n- [Sorting Algorithms](#sorting-algorithms)\n- [How to find time complexity](#how-to-find-time-complexity)\n  - [Iterative](#iterative)\n  - [Recursive #1](#recursive-1)\n  - [Recursive #2](#recursive-2) -->\n<h2>Big-O Complexity Chart</h2>\n<p><img src=\"/ed6d0608784b5d098ebae6f65e70bf9f/chart.svg\" alt=\"Big-O Complexity Chart\"></p>\n<blockquote>\n<p>Disclaimer: I didn’t create this chart, it’s adapted from <a href=\"https://www.bigocheatsheet.com/\">https://www.bigocheatsheet.com/</a>. All credits goes to <a href=\"https://twitter.com/ericdrowell\">Eric</a>.</p>\n</blockquote>\n<responsive-table>\n  {\n    \"thead\": [\n      [\"Types\", \"Name\", \"Example\"]\n    ],\n    \"tbody\": [\n      [\"`O(1)`\", \"Constant\", \"Adding an element at front of linked list\"],\n      [\"`O(log n)`\", \"Logarithmic\", \"Finding an element in sorted array\"],\n      [\"`O(n)`\", \"Linear\", \"Finding an element in unsorted array\"],\n      [\"`O(n log n)`\", \"Linear Logarithmic\", \"Merge Sort\"],\n      [\"`O(n^2)`\", \"Quadratic\", \"Shortest path between 2 nodes in a graph\"],\n      [\"`O(n^3)`\", \"Cubic\", \"Matrix Multiplication\"],\n      [\"`O(2^n)`\", \"Exponential\", \"Tower of Hanoi Problem\"]\n    ]\n  }\n</responsive-table>\n<h2>Common Data Structure Operations</h2>\n<p>Below are some common data structure and their operation time and space complexity.</p>\n<h3>Physical Data Structures</h3>\n<p>There are two types of physical data structures, <strong>array</strong> and <strong>linked list</strong>.</p>\n<h4>Array</h4>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 2,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"1D Array\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"2D Array\"\n        }\n      ],\n      [\"Time\", \"Space\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"create()\", \"`O(1)`\", \"`O(n)`\", \"`O(1)`\", \"`O(mn)`\"],\n      [\"insert()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"traverse()\", \"`O(n)`\", \"`O(1)`\", \"`O(mn)`\", \"`O(1)`\"],\n      [\"access[]\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"search()\", \"`O(n)`\", \"`O(1)`\", \"`O(mn)`\", \"`O(1)`\"],\n      [\"delete()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"]\n    ]\n  }\n</responsive-table>\n<h3>Logical Data Structures</h3>\n<p>Below are some common types of logical data structures.</p>\n<h4>Stack</h4>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 2,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"using Array\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"using Linked List\"\n        }\n      ],\n      [\"Time\", \"Space\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"createStack()\", \"`O(1)`\", \"`O(n)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"push()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"pop()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"peek()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"isEmpty()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"isFull()\", \"`O(1)`\", \"`O(1)`\", \"N/A\", \"N/A\"],\n      [\"deleteStack()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"]\n    ]\n  }\n</responsive-table>\n<h4>Queue</h4>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 2,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"using Array\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"using Linked List\"\n        }\n      ],\n      [\"Time\", \"Space\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"createQueue()\", \"`O(1)`\", \"`O(n)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"enqueue()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"dequeue()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"peek()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"isEmpty()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"isFull()\", \"`O(1)`\", \"`O(1)`\", \"N/A\", \"N/A\"],\n      [\"deleteQueue()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"]\n    ]\n  }\n</responsive-table>\n<h4>Tree</h4>\n<h5>Binary Tree</h5>\n<p>The table below shows the implementation between Array and Linked List for Binary Tree.</p>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 2,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"using Array\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"using Linked List\"\n        }\n      ],\n      [\"Time\", \"Space\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"createTree()\", \"`O(1)`\", \"`O(n)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"insert()\", \"`O(1)`\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"delete()\", \"`O(n)`\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"search()\", \"`O(n)`\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"traverse()\", \"`O(n)`\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"deleteTree()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"]\n    ]\n  }\n</responsive-table>\n<blockquote>\n<p>Using Linked List is more space efficient as creating a binary tree is O(1) as compared to Array which is O(n), hence, the preferred implementation is Linked List.</p>\n</blockquote>\n<h5>Binary Search Tree &#x26; AVL Tree</h5>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 3,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 4,\n          \"value\": \"Binary Search Tree\"\n        },\n        {\n          \"colspan\": 2,\n          \"rowspan\": 2,\n          \"value\": \"AVL Tree\"\n        }\n      ],\n      [\n        {\n          \"colspan\": 2,\n          \"value\": \"Avg.\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"Worse\"\n        }\n      ],\n      [\"Time\", \"Space\", \"Time\", \"Space\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"createTree()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"],\n      [\"insertNode()\", \"`O(log n)`\", \"`O(log n)`\", \"`O(n)`\", \"`O(n)`\", \"`O(log n)`\", \"`O(log n)`\"],\n      [\"deleteNode()\", \"`O(log n)`\", \"`O(log n)`\", \"`O(n)`\", \"`O(n)`\", \"`O(log n)`\", \"`O(log n)`\"],\n      [\"search()\", \"`O(log n)`\", \"`O(log n)`\", \"`O(n)`\", \"`O(n)`\", \"`O(log n)`\", \"`O(log n)`\"],\n      [\"traverse()\", \"`O(n)`\", \"`O(n)`\", \"`O(n)`\", \"`O(n)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"deleteTree()\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\", \"`O(1)`\"]\n    ]\n  }\n</responsive-table>\n<h4>Heap (Using Array)</h4>\n<responsive-table>\n  {\n    \"thead\": [\n      [\"Operations\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"createHeap()\", \"`O(1)`\", \"`O(n)`\"],\n      [\"peekTopOfHeap() \", \"`O(1)`\", \"`O(1)`\"],\n      [\"sizeOfHeap()\", \"`O(n)`\", \"`O(1)`\"],\n      [\"insertValue()\", \"`O(1)`\", \"`O(1)`\"],\n      [\"extractMin() / extractMax() \", \"`O(n)`\", \"`O(1)`\"],\n      [\"deleteHeap()\", \"`O(1)`\", \"`O(1)`\"]\n    ]\n  }\n</responsive-table>\n<h4>Hash Table</h4>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 2,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"Time\"\n        },\n        {\n          \"rowspan\": 2,\n          \"value\": \"Space\"\n        }\n      ],\n      [\"Avg.\", \"Worse\"]\n    ],\n    \"tbody\": [\n      [\"search()\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"insert()\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"],\n      [\"delete()\", \"`O(1)`\", \"`O(n)`\", \"`O(n)`\"]\n    ]\n  }\n</responsive-table>\n<h4>Graphs</h4>\n<h5>Common Operations</h5>\n<responsive-table>\n  {\n    \"thead\": [\n      [\"Operations\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"Breadth First Search\", \"`O(V + E)`\", \"`O(E)`\"],\n      [\"Depth First Search \", \"`O(E + V)`\", \"`O(V)`\"],\n      [\"Topological sort\", \"`O(E + V)`\", \"`O(E + V)`\"]\n    ]\n  }\n</responsive-table>\n<h5>Common Algorithms for Graph problems</h5>\n<responsive-table>\n  {\n    \"thead\": [\n      [\n        {\n          \"rowspan\": 2,\n          \"value\": \"Operations\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"Single Source Shortest Path\"\n        },\n        {\n          \"colspan\": 2,\n          \"value\": \"All Pair Shortest Path\"\n        }\n      ],\n      [\"Time\", \"Space\", \"Time\", \"Space\"]\n    ],\n    \"tbody\": [\n      [\"Breadth First Search\", \"`O(V^2)`\", \"`O(E)`\", \"`O(V^3)`\", \"`O(EV)`\"],\n      [\"Dijkstra\", \"`O(V^2)`\", \"`O(V)`\", \"`O(V^2)`\", \"`O(EV)`\"],\n      [\"Bellman Ford\", \"`O(VE)`\", \"`O(V)`\", \"`O(VE^2)`\", \"`O(V^2)`\"],\n      [\"Floyd Warshall\", \"N/A\", \"N/A\", \"`O(V^3)`\", \"`O(V^2)`\"]\n    ]\n  }\n</responsive-table>\n<h2>Sorting Algorithms</h2>\n<responsive-table>\n  {\n    \"thead\": [\n      [\"Types\", \"Time\", \"Space\", \"Stable\"]\n    ],\n    \"tbody\": [\n      [\"Bubble sort\", \"`O(n^2)`\", \"`O(1)`\", \"Yes\"],\n      [\"Selection sort\", \"`O(n^2)`\", \"`O(1)`\", \"No\"],\n      [\"Insertion sort\", \"`O(n^2)`\", \"`O(1)`\", \"Yes\"],\n      [\"Bucket sort\", \"`O(n log n)`\", \"`O(n)`\", \"Yes^*\"],\n      [\"Merge sort\", \"`O(n log n)`\", \"`O(n)`\", \"Yes\"],\n      [\"Quick sort\", \"`O(n log n)`\", \"`O(n)^*`\", \"No\"],\n      [\"Heap sort\", \"`O(n log n)`\", \"`O(1)`\", \"No\"]\n    ]\n  }\n</responsive-table>\n<h2>How to find time complexity</h2>\n<p>This section will show how to calculate the time complexity of <strong>iterative</strong> vs <strong>recursive</strong> algorithms.</p>\n<h3>Iterative</h3>\n<pre class=\"grvsc-container solarized-light grvsc-ps-tiaGIi grvsc-mm-tYvMB2 grvsc-ps-tYvMB2\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">function</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">findBiggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">let</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">biggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">[</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">0</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">];                  </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ------------------O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">for</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">let</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">i</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">1</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">; </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">i</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">&lt;</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">.</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">length</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">; </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">++</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">i</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {    </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ---------O(n)--|--O(n)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">[</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">i</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">] </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">&lt;=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">biggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">continue</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">;     </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// O(1)--|--O(1)--|</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">biggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">[</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">i</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">];                    </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// O(1)--|</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">return</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">biggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">;                        </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ------------------O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">}</span></span></code></pre>\n<p><strong>Time complexity:</strong> <code>O(1) + O(n) + O(1) = O(n)</code></p>\n<hr>\n<h3>Recursive #1</h3>\n<pre class=\"grvsc-container solarized-light grvsc-ps-tiaGIi grvsc-mm-tYvMB2 grvsc-ps-tYvMB2\" data-language=\"js\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">let</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">highest</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">0</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">function</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">findBiggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">n</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {     </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----T(n)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">n</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">===</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">-</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">1</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)                       </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)---|---Base condition</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">return</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">highest</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">;                   </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)---|</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">[</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">n</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">] </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">&gt;</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">highest</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)               </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">highest</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">[</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">n</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">]                  </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">return</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">findBiggestNum</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">n</span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">-</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">1</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)    </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----T(n-1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">}</span></span></code></pre>\n<p><strong>Equation 1:</strong> <code>T(n) = O(1) + T(n-1)</code></p>\n<blockquote>\n<p><code>O(1) + O(1) + O(1) + O(1) = O(1)</code></p>\n</blockquote>\n<p><strong>Base Condition:</strong> <code>T(-1) = O(1)</code></p>\n<blockquote>\n<p>if <code>n == -1</code>, recursion will end, so if the recursion method = <code>T(n)</code>, we replace <code>n</code> to <code>-1</code> to get <code>T(-1)</code>, and since base condition = <code>O(1)</code>, <code>T(-1) = O(1)</code>.</p>\n</blockquote>\n<p><strong>Equation 2:</strong> <code>T(n-1) = O(1) + T((n-1)-1)</code></p>\n<p><strong>Equation 3:</strong> <code>T(n-2) = O(1) + T((n-2)-1)</code></p>\n<pre class=\"grvsc-container solarized-light grvsc-ps-tiaGIi grvsc-mm-tYvMB2 grvsc-ps-tYvMB2\" data-language=\"sh\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">T(n) = 1 + T(n-1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = 1 + (1 + T</span><span class=\"grvsc-tiaGIi-11 grvsc-tYvMB2-8\">((n</span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">-</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">1</span><span class=\"grvsc-tiaGIi-11 grvsc-tYvMB2-8\">)</span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">-</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">1</span><span class=\"grvsc-tiaGIi-11 grvsc-tYvMB2-8\">))</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># substitute `Equation 2`</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = 2 + T(n-2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = 2 + (1 + T</span><span class=\"grvsc-tiaGIi-11 grvsc-tYvMB2-8\">((n</span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">-</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">2</span><span class=\"grvsc-tiaGIi-11 grvsc-tYvMB2-8\">)</span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">-</span><span class=\"grvsc-tiaGIi-6 grvsc-tYvMB2-7\">1</span><span class=\"grvsc-tiaGIi-11 grvsc-tYvMB2-8\">))</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># substitute `Equation 3`</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = 3 + T(n-3)           </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># notice the pattern, substitue with k</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = k + T(n-k)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = (n+1) + T(n-(n+1))   </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># attempt to make it T(-1) since it is the base condition, replace k with n+1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = n + 1 + T(-1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = n + 1 + 1            </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># T(-1) = 1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = O(n)</span></span></code></pre>\n<hr>\n<h3>Recursive #2</h3>\n<pre class=\"grvsc-container solarized-light grvsc-ps-tiaGIi grvsc-mm-tYvMB2 grvsc-ps-tYvMB2\" data-language=\"js\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">function</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">search</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">start</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-12\">end</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {      </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----T(n)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">start</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">&lt;=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">end</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {                        </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1) ---|--- Base Condition</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">[</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">start</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">] </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">==</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)                   </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1) ---|</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">      </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">return</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">start</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">                           </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1) ---|</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">else</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">                                     </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1) ---|</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">      </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">return</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-5 grvsc-tYvMB2-4\">false</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">                           </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1) ---|</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-13 grvsc-tiaGIi-b grvsc-tYvMB2-4\">let</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">=</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">find_mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">start</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">end</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)        </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">&gt;</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {                           </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">search</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">start</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)             </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----T(n/2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">else</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">&lt;</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">) {                      </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-11\">search</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">(</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">arr</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">, </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">end</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)               </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----T(n/2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">  </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">else</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">if</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> (</span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-1\">==</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">num</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">)                       </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">    </span><span class=\"grvsc-tiaGIi-8 grvsc-tYvMB2-15\">return</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\"> </span><span class=\"grvsc-tiaGIi-7 grvsc-tYvMB2-12\">mid</span><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">                               </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\">// ----O(1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">}</span></span></code></pre>\n<p><strong>Equation 1:</strong> <code>T(n) = T(n/2) + 1</code></p>\n<p><strong>Base Condition:</strong> <code>T(1) = O(1)</code></p>\n<blockquote>\n<p>If the array is of size 1, we can perform it in constant time.</p>\n</blockquote>\n<p><strong>Equation 2:</strong> <code>T(n/2) = T(n/4) + 1</code></p>\n<p><strong>Equation 3:</strong> <code>T(n/4) = T(n/8) + 1</code></p>\n<pre class=\"grvsc-container solarized-light grvsc-ps-tiaGIi grvsc-mm-tYvMB2 grvsc-ps-tYvMB2\" data-language=\"sh\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">T(n) = T(n/2) + 1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = T(n/4) + 1 + 1       </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># substitue `Equation 2`</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = T(n/4) + 2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = T(n/8) + 1 + 2       </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># substitue `Equation 3`</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = T(n/8) + 3</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = T(n/2^k) + k         </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># notice the pattern, substitue with k</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = T(1) + log n         </span><span class=\"grvsc-tiaGIi-3 grvsc-tiaGIi-i grvsc-tYvMB2-3\"># attempt to make it T(1) snce it is the base condition, see below how n/2^k = 1 = k</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = 1 + log n</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-tiaGIi-1 grvsc-tYvMB2-1\">     = O(log n)</span></span></code></pre>\n<blockquote>\n<p><code>[n/2^K = 1] => [n = 2^K] => [k = log n]</code></p>\n</blockquote>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color, transparent);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, transparent);\n  }\n  \n  .solarized-light { background-color: #FDF6E3; }\n  .solarized-light .grvsc-tiaGIi-i { font-style: italic; }\n  .solarized-light .grvsc-tiaGIi-b { font-weight: bold; }\n  .solarized-light .grvsc-tiaGIi-13 { color: #073642; }\n  .solarized-light .grvsc-tiaGIi-1 { color: #657B83; }\n  .solarized-light .grvsc-tiaGIi-7 { color: #268BD2; }\n  .solarized-light .grvsc-tiaGIi-8 { color: #859900; }\n  .solarized-light .grvsc-tiaGIi-6 { color: #D33682; }\n  .solarized-light .grvsc-tiaGIi-3 { color: #93A1A1; }\n  .solarized-light .grvsc-tiaGIi-11 { color: #2AA198; }\n  .solarized-light .grvsc-tiaGIi-5 { color: #B58900; }\n  body.light .grvsc-ps-tiaGIi { background-color: #FDF6E3; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-i { font-style: italic; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-b { font-weight: bold; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-13 { color: #073642; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-1 { color: #657B83; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-7 { color: #268BD2; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-8 { color: #859900; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-6 { color: #D33682; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-3 { color: #93A1A1; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-11 { color: #2AA198; }\n  body.light .grvsc-ps-tiaGIi .grvsc-tiaGIi-5 { color: #B58900; }\n  body.dark .grvsc-ps-tYvMB2 {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-4 { color: #569CD6; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-1 { color: #D4D4D4; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-11 { color: #DCDCAA; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-12 { color: #9CDCFE; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-7 { color: #B5CEA8; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-3 { color: #6A9955; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-15 { color: #C586C0; }\n  body.dark .grvsc-ps-tYvMB2 .grvsc-tYvMB2-8 { color: #CE9178; }\n  \n  /* Default Dark+ */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-tYvMB2 {\n      background-color: #1E1E1E;\n      color: #D4D4D4;\n    }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-4 { color: #569CD6; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-1 { color: #D4D4D4; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-11 { color: #DCDCAA; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-12 { color: #9CDCFE; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-7 { color: #B5CEA8; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-3 { color: #6A9955; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-15 { color: #C586C0; }\n    .grvsc-mm-tYvMB2 .grvsc-tYvMB2-8 { color: #CE9178; }\n  }\n</style>"}}]}},"pageContext":{"tag":"Big-O"}}}